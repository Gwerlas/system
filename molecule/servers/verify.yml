---
- name: Verify all custom settings
  hosts: all
  tasks:
    - name: Facts
      ansible.builtin.import_role:
        name: gwerlas.system
        tasks_from: facts

    - name: Rsync
      ansible.posix.synchronize:
        src: verify.yml
        dest: /tmp/verify.yml

    - name: Check host FQDN
      ansible.builtin.assert:
        quiet: true
        that:
          - ansible_fqdn == inventory_hostname + '.mydomain.tld'

    - name: Command line tools
      ansible.builtin.command: "{{ item }} --version"
      changed_when: false
      with_items:
        - rsync
        - wget
        - zsh

    - name: Check sudo rules
      ansible.builtin.command: sudo -l
      register: result
      changed_when: false
      failed_when: item not in result.stdout
      loop:
        - "!visiblepw"
        - always_set_home
        - QTDIR
        - NOPASSWD

    - name: Check groups
      ansible.builtin.group:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      loop:
        - name: administrators
          state: present
        - name: gods
          state: present
        - name: my_company
          state: present
        - name: my_team
          state: present
        - name: villains
          state: absent

    - name: Check users
      ansible.builtin.user:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      loop:
        - name: jane
          state: present
        - name: john
          state: present
        - name: drno
          state: absent

    - name: Check jane's group
      ansible.builtin.command:
        cmd: id -g -n jane
      register: result
      changed_when: false
      failed_when: result.stdout != 'administrators'

    - name: Check jane's SSH key
      become: true
      ansible.posix.authorized_key:
        key: ssh-rsa AAAA test
        user: jane
        state: present
      register: result
      failed_when: result is changed

    - name: ZSH configuration that should exists
      become: true
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - /etc/skel/.zshrc
        - /etc/skel/.zsh/history
        - /home/jane/.zshrc
        - /home/jane/.zsh/history
        - /home/john/.zshrc
        - /home/john/.zsh/history
      register: result
      failed_when: not result.stat.exists

    - name: ZSH configuration that should not exists
      become: true
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - /etc/skel/.zsh/prompt
        - /etc/skel/.zsh/prompt_git
        - /home/jane/.zsh/prompt
        - /home/jane/.zsh/prompt_git
        - /home/john/.zsh/prompt
        - /home/john/.zsh/prompt_git
      register: result
      failed_when: result.stat.exists

    - name: User my_service is lingered
      when: ansible_service_mgr == 'systemd'
      ansible.builtin.command:
        cmd: loginctl user-status my_service
      register: result
      failed_when: |
        result.rc > 0
        or
        (
          not 'Linger: yes' in result.stdout
          and
          not 'State: lingering' in result.stdout
        )
      changed_when: false

    - name: Load CA variables
      ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files:
            - "{{ ansible_os_family | lower }}-like.yml"
            - other.yml
          paths:
            - vars

    - name: Package installation
      become: true
      ansible.builtin.package:
        name:
          - openssl
          - httpie

    - name: Check Gwerlas CA
      ansible.builtin.command:
        cmd: "awk -v cmd='openssl x509 -noout -subject' '/BEGIN/{close(cmd)};{print | cmd}' {{ ca_certificates.bundle }}"
      changed_when: false
      register: result
      failed_when: |
        result.rc > 0
        or
        not 'GWERLAS CA' in result.stdout

    - name: Check that timedatectl is synchronized
      when: ansible_service_mgr == 'systemd'
      ansible.builtin.command:
        cmd: timedatectl
      register: result
      failed_when: |
        result.rc > 0
        or
        not 'synchronized: yes' in result.stdout
      changed_when: false

    - name: Check that chronyc is synchronized
      when: ansible_service_mgr == 'openrc'
      ansible.builtin.command:
        cmd: chronyc sourcestats
      changed_when: false

    - name: Check backup storage mount
      ansible.builtin.stat:
        path: /var/backups
      register: bkpdir
      failed_when: |
        not '/var/backups' in (ansible_mounts | map(attribute='mount'))
        or
        not bkpdir.stat.pw_name == 'vagrant'
        or
        not bkpdir.stat.wgrp

    # FIXME may fail due to unpredictable network interface name
    # - name: Check private network    # noqa risky-shell-pipe - pipefail is not supported by sh
    #   environment:
    #     PATH: /usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
    #   ansible.builtin.shell:
    #     cmd: |
    #       ip -o -f inet addr show | tail -n 1
    #   register: result
    #   changed_when: false
    #   failed_when: |
    #     result.rc > 0
    #     or
    #     not 'brd 192.168.250.255' in result.stdout

    - name: Read SSH host keys fixtures
      delegate_to: localhost
      ansible.builtin.slurp:
        src: "{{ item }}"
      with_fileglob:
        - "{{ inventory_hostname }}/ssh_host_*"
      register: ssh_host_keys

    - name: Check
      vars:
        pubkeys: |
          {{
            ssh_host_keys |
            json_query('results[?ends_with(source, `.pub`)].content') |
            map('b64decode')
          }}
        facts:
          - [ssh_host_key_ecdsa_public_keytype, ssh_host_key_ecdsa_public]
          - [ssh_host_key_ed25519_public_keytype, ssh_host_key_ed25519_public]
          - [ssh_host_key_rsa_public_keytype, ssh_host_key_rsa_public]
      ansible.builtin.assert:
        quiet: true
        that:
          - pubkeys[0] is search(facts[0] | map('extract', ansible_facts) | join(' ') | regex_escape)
          - pubkeys[1] is search(facts[1] | map('extract', ansible_facts) | join(' ') | regex_escape)
          - pubkeys[2] is search(facts[2] | map('extract', ansible_facts) | join(' ') | regex_escape)

- name: Check EPEL
  hosts: el
  gather_facts: false
  tasks:
    - name: Repository file
      ansible.builtin.file:
        path: /etc/yum.repos.d/epel.repo
        state: file
