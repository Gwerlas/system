---
# For feature flipping purpose
in_container: "{{ 'container' in ansible_virtualization_tech_guest }}"
is_desktop: "{{ 'desktop' in system_profile }}"
use_lvm: "{{ system_manage_storages and (system_storages_vg | length) > 0 }}"

################
### Packages ###
################

# Under automatic mode, we use binaries
packages_build: "{{ false if system_packages_build == 'auto' else system_packages_build }}"

# Profiles
profiles:
  all:
    packages:
      - acl
      - sudo
      - rsync
  desktop:
    packages:
      - libreoffice
      - firefox
      - usbutils
  gnome:
    packages:
      - baobab
      - eog
      - evince
      - file-roller
      - gdm
      - gnome-backgrounds
      - gnome-console
      - gnome-online-accounts
      - gnome-screenshot
      - gnome-session
      - gnome-shell
      - gnome-software
      - gnome-text-editor
      - nautilus
      - seahorse
    services:
      - gdm

current_profiles: "{{ system_profile | split('/') }}"

# FIXME use the vars/<profile>.yml file
current_profiles_values: |
  {{
    (['all'] + current_profiles) |
    intersect(profiles.keys()) |
    map('extract', profiles)
  }}

# CA Certificates
ca_certificates:
  bundle: /etc/ssl/certs/ca-certificates.crt
  path: /usr/local/share/ca-certificates
  command: update-ca-certificates

################
## Networking ##
################

default_network_backend_name: systemd
network_backend_name: "{{ system_network_backend | default(default_network_backend_name) }}"
network_backend: "{{ network_backends[network_backend_name] }}"

network_backends:
  ifupdown:
    service: networking
    template:
      src: network/interfaces.d/netiface.j2
      dest: /etc/network/interfaces.d/%s
  redhat:
    service: NetworkManager.service
    template:
      src: sysconfig/network-scripts/ifcfg.j2
      dest: /etc/sysconfig/network-scripts/ifcfg-%s
  systemd:
    service: systemd-networkd.service
    template:
      src: systemd/network/netiface.network.j2
      dest: /etc/systemd/network/%s.network

# Network types
networks_types:
  bridge:
    packages:
      - bridge-utils

current_network_types: |
  {{
    system_networks_interfaces |
    selectattr('type', 'defined') |
    map(attribute='type') |
    map('lower') |
    unique |
    intersect(networks_types.keys()) |
    map('extract', networks_types)
  }}

############
### SSHd ###
############

sshd_config:
  Include: /etc/ssh/sshd_config.d/*.conf

################
###   Time   ###
################

# The name of the current NTP engine, use this variables in tasks and handlers.
# Do not use default_time_backend_name unless you know what You're doing.
time_backend_name: "{{ system_time_backend | default(default_time_backend_name) }}"

# If systemd_timesyncd is missing or not well implemented, You can change
# the default NTP engine in appropriate vars files.
default_time_backend_name: systemd-timesyncd

# The current NTP engine, prefer this variable in tasks and handlers
# and use its properties (services, templates).
time_backend: "{{ time_backends[time_backend_name] }}"

# NTP engines properties, use this variable in your tasks and handlers and not
# default_time_backends.
time_backends: "{{ default_time_backends }}"

# Defaults NTP engines properties, use it only to fill the time_backends variable.
# See debian-like.yml vars file as example.
default_time_backends:
  chrony:
    services:
      - chronyd
    templates:
      - chrony.conf
  ntp:
    services:
      - ntpd
    templates:
      - ntp.conf
  systemd-timesyncd:
    services:
      - systemd-timesyncd.service
    templates:
      - systemd/timesyncd.conf

# NTP engines supported by the current node
supported_time_backends: |
  {{
    time_backends |
    dict2items |
    rejectattr('key', 'in', masks.time_backends | default([])) |
    items2dict
  }}

################
#### Users #####
################

groups_present: |
  {{
    (system_users_groups | selectattr('state', 'undefined'))
  + (system_users_groups | selectattr('state', 'defined') | selectattr('state', '!=', 'absent'))
  }}

groups_absent: |
  {{
    system_users_groups |
    selectattr('state', 'defined') |
    selectattr('state', '==', 'absent')
  }}

users_present: |
  {{
    (system_users | selectattr('state', 'undefined'))
  + (system_users | selectattr('state', 'defined') | selectattr('state', '==', 'present'))
  }}

users_shells: |
  {{
    users_present |
    rejectattr('system', 'defined') |
    selectattr('shell', 'defined') |
    map(attribute='shell') |
    map('basename') |
    sort |
    unique
  }}
