---
- name: Firewall
  become: true
  block:
    - name: Firewall - Service
      ansible.builtin.service:
        name: "{{ lookup('service', 'firewalld') }}"
        state: started
        enabled: true

    - name: Firewall - Logging for denied packets
      when: system_firewall_log
      ansible.builtin.lineinfile:
        path: /etc/firewalld/firewalld.conf
        line: LogDenied=all
        regexp: ^LogDenied=
      notify: reload firewalld

    - name: Firewall - Default zone
      ansible.builtin.command:
        cmd: "firewall-cmd --get-default-zone"
      register: result
      changed_when: result.stdout != system_firewall_default_zone
      notify: set default zone

    - name: Firewall - Rules - Show
      ansible.builtin.debug:
        var: system_firewall_rules
        verbosity: 1

    - name: Firewall - Rules
      when: system_firewall_rules | length > 0
      ansible.posix.firewalld:
        icmp_block: "{{ rule.icmp_block | default(omit) }}"
        icmp_block_inversion: "{{ rule.icmp_block_inversion | default(omit) }}"
        immediate: "{{ rule.immediate | default(true) }}"
        interface: "{{ rule.interface | default(omit) }}"
        masquerade: "{{ rule.masquerade | default(omit) }}"
        offline: "{{ rule.offline | default(omit) }}"
        permanent: "{{ rule.permanent | default(true) }}"
        port: "{{ rule.port | default(omit) }}"
        port_forward: "{{ rule.port_forward | default(omit) }}"
        rich_rule: "{{ rule.rich_rule | default(omit) }}"
        service: "{{ rule.service | default(omit) }}"
        source: "{{ rule.source | default(omit) }}"
        state: "{{ rule.state | default('enabled') }}"
        target: "{{ rule.target | default(omit) }}"
        timeout: "{{ rule.timeout | default(omit) }}"
        zone: "{{ rule.zone | default(system_firewall_default_zone) }}"
      loop: "{{ system_firewall_rules }}"
      loop_control:
        loop_var: rule
